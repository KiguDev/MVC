#pragma checksum "C:\Users\SIQUEIROS\source\repos\CURSO\RestauranteMVC\Views\OrderDetails\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "738c74d811fb462653171eca5158742b3fd7e7af"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_OrderDetails_Index), @"mvc.1.0.view", @"/Views/OrderDetails/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/OrderDetails/Index.cshtml", typeof(AspNetCore.Views_OrderDetails_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\SIQUEIROS\source\repos\CURSO\RestauranteMVC\Views\_ViewImports.cshtml"
using RestauranteMVC;

#line default
#line hidden
#line 2 "C:\Users\SIQUEIROS\source\repos\CURSO\RestauranteMVC\Views\_ViewImports.cshtml"
using RestauranteMVC.Models;

#line default
#line hidden
#line 3 "C:\Users\SIQUEIROS\source\repos\CURSO\RestauranteMVC\Views\_ViewImports.cshtml"
using Restaurante.Core.Entities;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"738c74d811fb462653171eca5158742b3fd7e7af", @"/Views/OrderDetails/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3021e54aff9ad800a8f73fda0d422276f9de9a1f", @"/Views/_ViewImports.cshtml")]
    public class Views_OrderDetails_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\SIQUEIROS\source\repos\CURSO\RestauranteMVC\Views\OrderDetails\Index.cshtml"
  
    ViewData["Title"] = "OrderDetails";

#line default
#line hidden
            BeginContext(50, 739, true);
            WriteLiteral(@"
<div class=""card "" style=""margin-bottom:40px;margin-top:40px"">
    <div class=""card-content flow-text"">
        <a id=""addProduct"" class=""btn-floating halfway-fab waves-effect waves-light red pulse""><i class=""material-icons"">add_shopping_cart</i></a>
        <span class=""card-title flow-text "">OrderDetails</span>
        <div class=""row"">
            <p class=""flow-text right "">Total</p>
        </div>
        <div class=""row"">
            <p id=""total"" class=""flow-text right""></p>
        </div>
        
    </div>
    <div class=""card-action"">
        <a id=""ordersLink"" class=""red-text"" href=""#"">Ver Ordenes</a>
        <a class=""red-text"" href=""#"">Finalizar</a>
    </div>
</div>
<div id=""content"">

</div>
");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(809, 3419, true);
                WriteLiteral(@"
<script>
    var urlParams = new URLSearchParams(window.location.search);
    var orderId = urlParams.get(""id"");

    $(document).ready(async function () {
        updatePriceTag();
        $('#ordersLink').attr(""href"", `/ordenes?id=${orderId}`);
        $(`#addProduct`).attr(""href"", `ordenes/productos?id=${orderId}`)
        await fetch('/template/card').then(function (response) { return response.text() }).then(function (card) {

            fetch(`/api/orderdetails?id=${orderId}`).then(function (response) { return response.json() }).then(function (jsonResponse) {
                //Mostrar Productos
                $.each(jsonResponse, function (index,value) {
                    let newCard = $(card);
                    let id = jsonResponse[index]['id'];
                    let idProducto = jsonResponse[index]['producto']['id'];
                    newCard.attr(""id"", `card${idProducto}`);

                    newCard.find('img').attr(""id"", `img${id}`);
                    newCard.find");
                WriteLiteral(@"('img').attr(""src"", jsonResponse[index]['producto']['imagen']);

                    newCard.find('#nombre').attr(""id"", `nombre${id}`);
                    newCard.find(`#nombre${id}`).text(jsonResponse[index]['producto']['nombre']);

                    newCard.find('#precio').attr(""id"", `precio${id}`);
                    let precio = jsonResponse[index]['producto']['precio'];
                    newCard.find(`#precio${id}`).text(`$${precio}`);
                    
                    newCard.find('#cantidad').attr(""id"", `cantidad${idProducto}`);
                    newCard.find(`#cantidad${idProducto}`).val(jsonResponse[index]['cantidad']);
                    newCard.find(`#cantidad${idProducto}`).on(""change"", function () {
                        jsonResponse[index]['cantidad'] = parseInt($(`#cantidad${idProducto}`).val(), 10);
                        updateTotalRequest(jsonResponse[index]);
                    });

                    newCard.find('#delete').attr(""id"", `delete${idProduct");
                WriteLiteral(@"o}`);
                    newCard.find(`#delete${idProducto}`).on('click', function () { RemoveProduct(jsonResponse[index]) });
                    $('#content').append(newCard);
                    
                });
            });
        });
    });

    function updatePriceTag() {
        fetch(`/api/ordenes?id=${orderId}`).then(function (response) { return response.json() }).then(function (data) {
            $.each(data, function (index, value) {
                if (data[index]['id'] == orderId) {
                    let precio = data[index]['total'];
                    $('#total').text(`$${precio}`);
                }
            });
        });
        
    }

    async function updateTotalRequest(body) {
        await fetch('/api/orderdetails', { method: 'PUT', body: JSON.stringify(body), headers: { 'Content-Type': 'application/json' } }).then(function (response) {
            updatePriceTag();
        });
    }

    async function RemoveProduct(body) {
        await f");
                WriteLiteral(@"etch('/api/orderdetails', { method: 'DELETE', body: JSON.stringify(body), headers: { 'Content-Type': 'application/json' } }).then(function (response) {
            //Remove product and Update Total
            updatePriceTag();
            let id = body['producto']['id'];
            $(`#card${id}`).remove();
        });
    }
</script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
